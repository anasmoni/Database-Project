CREATE OR REPLACE TRIGGER AUTO_REPLACE
    BEFORE INSERT ON EMPLOYEE_ASSIGN
    REFERENCING OLD AS OLD NEW AS NEW
    FOR EACH ROW
    BEGIN
    DELETE FROM EMPLOYEE_ASSIGN WHERE EID = :NEW.EID;
END;
/




CREATE OR REPLACE TRIGGER AUTO_CLEAR_TEST_HISTORY
    AFTER DELETE ON TEST_HISTORY
    REFERENCING OLD AS OLD NEW AS NEW
    FOR EACH ROW
    BEGIN
    
    DELETE FROM TESTS WHERE NAME = :OLD.TEST_NAME;
END;
/




CREATE OR REPLACE TRIGGER WARD_BED_NUMBERING
    AFTER INSERT ON ROOMS
    REFERENCING OLD AS OLD NEW AS NEW
    FOR EACH ROW
    DECLARE 
        TP VARCHAR2(30);
        BD INT;
    BEGIN
    TP := :NEW.TYPE;
    BD := :NEW.BEDS;
    
    IF TP='WARD' THEN
        WHILE BD>0
        LOOP
            INSERT INTO STAYS (PID,RID,BID,CHECK_OUT) VALUES(1,:NEW.RID,TO_CHAR(BD),SYSDATE);
            BD := BD-1;
        END LOOP ;
        
    END IF;
END;
/






create or replace PROCEDURE DELETE_PATIENT_BEFORE(COUT IN DATE) IS

    BEGIN

        DELETE FROM APPOINTMENT WHERE APP_DATE <= COUT AND PID<>1;
        COMMIT;

        DELETE FROM PRESCRIPTION WHERE DATE_VISITED <= COUT AND PID<>1;
        COMMIT;
        DELETE FROM STAYS WHERE CHECK_OUT <= COUT AND PID<>1;
        COMMIT;
        DELETE FROM PATIENT WHERE DATE_VISITED <= COUT AND PID<>1;
        COMMIT;
    END;





CREATE OR REPLACE PROCEDURE DELETE_ROOMS(RMID IN NUMBER) IS
    
    BEGIN
        DELETE FROM EMPLOYEE_ASSIGN WHERE RID = RMID;
        COMMIT;
        DELETE FROM STAYS WHERE RID = RMID;
        COMMIT;
        DELETE FROM OPERATIONS WHERE RID = RMID;
        COMMIT;
        DELETE FROM TESTS WHERE LAB_NO = RMID;
        COMMIT;
        DELETE FROM ROOMS WHERE RID = RMID;
        COMMIT;
    END;
/




CREATE OR REPLACE PROCEDURE TEST_RECEIPT(TNAME IN VARCHAR2 , PRID IN NUMBER ,LBNO OUT NUMBER,CST OUT NUMBER ) 
    IS
    BEGIN
        INSERT INTO TEST_HISTORY (TEST_NAME,PRES_ID,TEST_DATE) VALUES(TNAME,PRID,SYSDATE);
        
        SELECT LAB_NO  , COST INTO  LBNO, CST FROM  TESTS WHERE NAME = TNAME;
        

        COMMIT;
    END;
/






create or replace FUNCTION DELETE_DOCTOR(DID IN INT)
RETURN VARCHAR2 IS
    MSG VARCHAR2(25);
    BEGIN

        SELECT PROFESSION INTO MSG FROM EMPLOYEE WHERE EID = DID;

        IF MSG='Doctor' THEN
            DELETE FROM APPOINTMENT WHERE EID = DID;
            DELETE FROM PRESCRIPTION P WHERE P.DID = DID;
            DELETE FROM DOCTORS WHERE EID = DID;
            DELETE FROM EMPLOYEE WHERE EID = DID;
        END IF;
        RETURN MSG ;
END ;




create or replace FUNCTION DELETE_EMPLOYEE(NID IN INT)
RETURN VARCHAR2 IS
    MSG VARCHAR2(25);
    BEGIN
        DBMS_OUTPUT.PUT_LINE(NID) ;
        SELECT PROFESSION INTO MSG FROM EMPLOYEE WHERE EID = NID;

        IF MSG<>'Nurse' AND MSG<>'Doctor' AND MSG<>'Admin' AND MSG is not null THEN
            DELETE FROM EMPLOYEE_ASSIGN WHERE EID = NID;
            DELETE FROM EMPLOYEE WHERE EID = NID;
        END IF;
        RETURN MSG ;
END ;






create or replace FUNCTION DELETE_NURSE(NID IN INT)
RETURN VARCHAR2 IS
    MSG VARCHAR2(25);
    BEGIN

        SELECT PROFESSION INTO MSG FROM EMPLOYEE WHERE EID = NID;

        IF MSG='Nurse' THEN
            DELETE FROM NURSE WHERE EID = NID;
            DELETE FROM EMPLOYEE WHERE EID = NID;
        END IF;
        RETURN MSG ;
END ;